winedata = read.csv('C:\\Users\\Picard\\Dropbox\\Github\\CS3002_003_Classification\\winedata3.csv', sep=",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart")
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('C:\\Users\\Picard\\Dropbox\\Github\\CS3002_003_Classification\\winedata2.csv', sep=",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart")
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('C:\\Users\\Picard\\Dropbox\\Github\\CS3002_003_Classification\\winedata3.csv', sep=",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart")
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('C:\\Users\\Picard\\Dropbox\\Github\\CS3002_003_Classification\\winedata3.csv', sep=",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart")
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('C:\\Users\\Picard\\Dropbox\\Github\\CS3002_003_Classification\\winedata3.csv', sep=",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
install.packages("rpart")
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rpart")
install.packages("rpart")
winedata = read.csv('C:\\Users\\Picard\\Dropbox\\Github\\CS3002_003_Classification\\winedata3.csv', sep=",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart")
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('C:\\Users\\Picard\\Dropbox\\Github\\CS3002_003_Classification\\winedata3.csv', sep=",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart")
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('.\\winedata3.csv', sep=",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('.\\winedata3.csv', sep=",", header=TRUE) #reads csv file into R,values seperated by commas
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('.\\winedata3.csv', sep=",", header=FALSE) #reads csv file into R,values seperated by commas
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('.\\winedata3.csv', sep=",") #reads csv file into R,values seperated by commas
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('.\\winedata3.csv', sep=",") #reads csv file into R,values seperated by commas
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData3")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
winedata = read.csv('.\\winedata3.csv', sep=",") #reads csv file into R,values seperated by commas
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData3")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
treepred <-predict(fit, winevaluesTest, type = 'class')
winedata = read.csv('.\\winedata3.csv', sep=",") #reads csv file into R,values seperated by commas
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData3")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
treepred <-predict(fit, winevaluesTest, type = 'class')
n = length(wineclassTest) #the number of test cases
ncorrect = sum(treepred==wineclassTest) #the number of correctly
predicted
accuracy=ncorrect/n
print(accuracy)
winedata = read.csv('.\\winedata3.csv', sep=",") #reads csv file into R,values seperated by commas
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData3")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
treepred <-predict(fit, winevaluesTest, type = 'class')
n = length(wineclassTest) #the number of test cases
ncorrect = sum(treepred==wineclassTest) #the number of correctly predicted
accuracy=ncorrect/n
print(accuracy)
winedata = read.csv('.\\winedata3.csv', sep=",") #reads csv file into R,values seperated by commas
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData3")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
treepred <- predict(fit, winevaluesTest, type = 'class')
n = length(wineclassTest) #the number of test cases
ncorrect = sum(treepred==wineclassTest) #the number of correctly predicted
accuracy=ncorrect/n
print(accuracy)
winedata = read.csv('.\\winedata3.csv', sep=",") #reads csv file into R,values seperated by commas
WineClass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData3")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
treepred <- predict(fit, winevaluesTest, type = 'class')
n = length(wineclassTest) #the number of test cases
ncorrect = sum(treepred==wineclassTest) #the number of correctly predicted
accuracy=ncorrect/n
print(accuracy)
winedata = read.csv('.\\winedata.csv', sep=",")
winedata = read.csv('\\winedata.csv', sep=",")
winedata = read.csv('.\\winedata.csv', sep=",")
winedata = read.csv('.\\winedata3.csv', sep=",") #reads csv file into R,values seperated by commas
WineClass = winedata[,1]
winevalues = winedata[,-1]
#set up training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winedata[1:100,]
#and test set
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
#install.packages("rpart") #only needs to be installed once so can be left commented most of the time
library(rpart)
fit <- rpart(wineclassTrain~., method="class", data=winevaluesTrain)
plot(fit, uniform=TRUE, main="Decision Treee for WineData3")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
treepred <- predict(fit, winevaluesTest, type = 'class')
n = length(wineclassTest) #the number of test cases
ncorrect = sum(treepred==wineclassTest) #the number of correctly predicted
accuracy=ncorrect/n
print(accuracy)
mydata = read.csv('.\\seeds_dataset.csv') #imports the data from seeds_dataset.csv
truedata = read.csv('.\\seeds_real.csv', header=F)
source(".\\WK_R.R") #imports Weighted Kappa code to use as source
min=2 #defines minimum value of k, cannot be less than 2
max=8 #defines maximum value of k
wk_temp_km <- data.frame()
wk_temp_ha <- data.frame()
wk_temp_hc <- data.frame()
wk_temp_hs <- data.frame()
wk_store_km <- data.frame()
wk_store_ha <- data.frame()
wk_store_hc <- data.frame()
wk_store_hs <- data.frame()
#kmeans
for(k in min:max)
{
fit<- kmeans(mydata, k) #calculates kmeans for k clusters
aggregate(mydata,by=list(fit$cluster),FUN=mean) #gets statistics on clusters using mean value for each variable
Kgroups = fit$cluster #assigns value to Kgroups
plot(mydata, col=Kgroups, main=bquote("Kmeans, k="~.(k))) #plots scatterplot of mydata with Kgroups_n to colour code
wk_km = WK_R(Kgroups, truedata$V1) #sets wk value to the value returned by WK_R code
wk_store_km <- rbind(wk_store_km, (wk_temp_km <- data.frame(k,wk_km))) #creates wk_temp dataframe, adds k and wk to wk_temp, binds wk_temp to bottom of wk_store
}
#hierarchical average
for(k in min:max)
{
d <- dist(mydata, method="euclidian") #generate distance matrix of euclidian values between datapoints
fit <- hclust(d, method="average") #performs clustering with linkage measure defined above
plot(fit) #plots dendrogram
Hgroups <- cutree(fit, k) #cuts dendrogram into k clusters
rect.hclust(fit, k, border="pink") #places pink borders to display k clusters
plot(mydata, col=Hgroups, main=bquote("hierarchical clustering, Average Linkage, k="~.(k))) #plots scatterplot with colour coded clusters
wk_ha = WK_R(Hgroups, truedata$V1) #sets wk value to the value returned by WK_R code
wk_store_ha <- rbind(wk_store_ha, (wk_temp_ha <- data.frame(k,wk_ha))) #creates wk_temp dataframe, adds k and wk to wk_temp, binds wk_temp to bottom of wk_store
}
#hierarchical complete
for(k in min:max)
{
d <- dist(mydata, method="euclidian") #generate distance matrix of euclidian values between datapoints
fit <- hclust(d, method="complete") #performs clustering with linkage measure defined above
plot(fit) #plots dendrogram
Hgroups <- cutree(fit, k) #cuts dendrogram into k clusters
rect.hclust(fit, k, border="pink") #places pink borders to display k clusters
plot(mydata, col=Hgroups, main=bquote("hierarchical clustering, Complete Linkage, k="~.(k))) #plots scatterplot with colour coded clusters
wk_hc = WK_R(Hgroups, truedata$V1) #sets wk value to the value returned by WK_R code
wk_store_hc <- rbind(wk_store_hc, (wk_temp_hc <- data.frame(k,wk_hc))) #creates wk_temp dataframe, adds k and wk to wk_temp, binds wk_temp to bottom of wk_store
}
#hierarchical single
for(k in min:max)
{
d <- dist(mydata, method="euclidian") #generate distance matrix of euclidian values between datapoints
fit <- hclust(d, method="single") #performs clustering with linkage measure defined above
plot(fit) #plots dendrogram
Hgroups <- cutree(fit, k) #cuts dendrogram into k clusters
rect.hclust(fit, k, border="pink") #places pink borders to display k clusters
plot(mydata, col=Hgroups, main=bquote("hierarchical clustering, Single Linkage, k="~.(k))) #plots scatterplot with colour coded clusters
wk_hs = WK_R(Hgroups, truedata$V1) #sets wk value to the value returned by WK_R code
wk_store_hs <- rbind(wk_store_hs, (wk_temp_hs <- data.frame(k,wk_hs))) #creates wk_temp dataframe, adds k and wk to wk_temp, binds wk_temp to bottom of wk_store
}
plot(wk_store_km, main="wk_km against k") #plots the different wk values against their respective k value
plot(wk_store_ha, main="wk_ha against k") #plots the different wk values against their respective k value
plot(wk_store_hc, main="wk_hc against k") #plots the different wk values against their respective k value
plot(wk_store_hs, main="wk_hs against k") #plots the different wk values against their respective k value
